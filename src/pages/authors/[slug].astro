---
export interface Props {
  author: any; // TODO: Define proper type
}

// src/pages/authors/[slug].astro
import Layout from '@/layouts/Layout.astro'
import Navigation from '@/components/Navigation.astro'
import Footer from '@/components/Footer.astro'
import PostCard from '@/components/PostCard.astro'
import AuthorInfo from '@/components/AuthorInfo.astro'
import CosmicBadge from '@/components/CosmicBadge.astro'
import { cosmic, hasStatus } from '@/lib/cosmic'
import type { Author, Post } from '@/types'

export async function getStaticPaths() {
  try {
    const response = await cosmic.objects
      .find({ type: 'authors' })
      .props(['id', 'title', 'slug', 'metadata'])
    
    return response.objects.map((author: Author) => ({
      params: { slug: author.slug },
      props: { author }
    }))
  } catch (error) {
    if (hasStatus(error) && error.status === 404) {
      return []
    }
    throw error
  }
}

const { author } = Astro.props as { author: Author }

let posts: Post[] = []

try {
  const response = await cosmic.objects
    .find({ 
      type: 'posts',
      'metadata.author': author.id
    })
    .props(['id', 'title', 'slug', 'metadata'])
    .depth(1)
  
  posts = (response.objects as Post[]).sort((a, b) => {
    const dateA = new Date(a.metadata?.published_date || '').getTime()
    const dateB = new Date(b.metadata?.published_date || '').getTime()
    return dateB - dateA
  })
} catch (error) {
  if (hasStatus(error) && error.status === 404) {
    posts = []
  } else {
    console.error('Error fetching posts:', error)
  }
}

const bucketSlug = import.meta.env.COSMIC_BUCKET_SLUG
---

<Layout 
  title={`${author.title} - Cosmic Blog`}
  description={author.metadata.bio || `Posts by ${author.title}`}
>
  <Navigation />
  <main class="min-h-screen">
    <section class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16">
      <div class="bg-white border border-gray-200 rounded-lg p-8 mb-12">
        <AuthorInfo author={author} showBio={true} />
      </div>

      <h2 class="text-3xl font-bold text-gray-900 mb-8">
        Posts by {author.title}
      </h2>

      {posts.length === 0 ? (
        <div class="text-center py-12">
          <p class="text-gray-600 text-lg">No posts by this author yet.</p>
        </div>
      ) : (
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
          {posts.map((post) => (
            <PostCard post={post} />
          ))}
        </div>
      )}
    </section>
  </main>
  <Footer />
  <CosmicBadge bucketSlug={bucketSlug} />
</Layout>